File 'cards/mine.c'
Lines executed:0.00% of 11
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
Calls executed:0.00% of 2
Creating 'mine.c.gcov'

        -:    0:Source:cards/mine.c
        -:    0:Graph:mine.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    0:Source is newer than graph
        -:    1:#include "../dominion.h"
        -:    2:
        -:    3:/**
        -:    4: * Trade out a coin card for one of the next-highest value
        -:    5: */
        -:    6:void upgradeCoin(int player, struct gameState *state, int coinCard);
        -:    7:
        -:    8:/**
        -:    9: * Plays a mine card. See header file for full card description.
        -:   10: */
function playMine called 0 returned 0% blocks executed 0%
    #####:   11:int playMine(int player, struct gameState *state, int mineCard, int coinCard) {
    #####:   12:    int cardValue = state->hand[player][coinCard];
    #####:   13:    if (cardValue == copper || cardValue == silver) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   14:        upgradeCoin(player, state, coinCard);
call    0 never executed
    #####:   15:        discardCard(mineCard, player, state, 1);
call    0 never executed
    #####:   16:        return 0;
        -:   17:    } else {
    #####:   18:        return -1;
        -:   19:    }
        -:   20:}
        -:   21:
function upgradeCoin called 0 returned 0% blocks executed 0%
    #####:   22:void upgradeCoin(int player, struct gameState *state, int coinCard) {
        -:   23:    // since the coin enums are in order, to change them out all you need
        -:   24:    // to do is increment the card's value
    #####:   25:    int newCoin = state->hand[player][coinCard]++;
    #####:   26:    state->supplyCount[newCoin]--;
    #####:   27:}
