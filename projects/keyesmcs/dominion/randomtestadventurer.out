Testing playAdventurer
test 0
test 1
test 2
test 3
test 4
test 5
test 6
test 7
test 8
test 9
test 10
test 11
test 12
test 13
test 14
test 15
test 16
test 17
test 18
test 19
test 20
test 21
test 22
test 23
test 24
test 25
test 26
test 27
test 28
test 29
test 30
test 31
test 32
test 33
test 34
test 35
test 36
test 37
test 38
test 39
test 40
test 41
test 42
test 43
test 44
test 45
test 46
test 47
test 48
test 49
test 50
test 51
test 52
test 53
test 54
test 55
test 56
test 57
test 58
test 59
test 60
test 61
test 62
test 63
test 64
test 65
test 66
test 67
test 68
test 69
test 70
test 71
test 72
test 73
test 74
test 75
test 76
test 77
test 78
test 79
test 80
test 81
test 82
test 83
test 84
test 85
test 86
test 87
test 88
test 89
test 90
test 91
test 92
test 93
test 94
test 95
test 96
test 97
test 98
test 99
test 100
test 101
test 102
test 103
test 104
test 105
test 106
test 107
test 108
test 109
test 110
test 111
test 112
test 113
test 114
test 115
test 116
test 117
test 118
test 119
test 120
test 121
test 122
test 123
test 124
test 125
test 126
test 127
test 128
test 129
test 130
test 131
test 132
test 133
test 134
test 135
test 136
test 137
test 138
test 139
test 140
test 141
test 142
test 143
test 144
test 145
test 146
test 147
test 148
test 149
test 150
test 151
test 152
test 153
test 154
test 155
test 156
test 157
test 158
test 159
test 160
test 161
test 162
test 163
test 164
test 165
test 166
test 167
test 168
test 169
test 170
test 171
test 172
test 173
test 174
test 175
test 176
test 177
test 178
test 179
test 180
test 181
test 182
test 183
test 184
test 185
test 186
test 187
test 188
test 189
test 190
test 191
test 192
test 193
test 194
test 195
test 196
test 197
test 198
test 199
ALL TESTS OK
File 'adventurer.c'
Lines executed:100.00% of 18
Branches executed:100.00% of 10
Taken at least once:80.00% of 10
Calls executed:100.00% of 5
Creating 'adventurer.c.gcov'

        -:    0:Source:adventurer.c
        -:    0:Graph:adventurer.gcno
        -:    0:Data:adventurer.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "../dominion.h"
        -:    2:#include <stdio.h>
        -:    3:
        -:    4:/**
        -:    5: * Returns the most recently drawn card for a given player
        -:    6: * In practice, that's the "top" card in the player's hand
        -:    7: */
        -:    8:int getDrawnCard(int player, struct gameState *state);
        -:    9:
        -:   10:
        -:   11:
        -:   12:/**
        -:   13: * Places the most recently drawn card on the discard pile
        -:   14: */
        -:   15:void discardLastDrawnCard(int player, struct gameState *state);
        -:   16:
        -:   17:/**
        -:   18: * Plays the adventurer card, see header for full description
        -:   19: */
function playAdventurer called 200 returned 100% blocks executed 100%
      200:   20:int playAdventurer(int player, struct gameState *state) {
      200:   21:    int drawnTreasure = 0; // Tracks the number of treasure cards drawn
        -:   22:    int cardDrawn;
        -:   23:
    48514:   24:    while(drawnTreasure < 2) {
branch  0 taken 48114
branch  1 taken 200 (fallthrough)
        -:   25:        //if the deck is empty, shuffle discard and add to deck
    48114:   26:        if (state->deckCount[player] <= 1) {
branch  0 taken 200 (fallthrough)
branch  1 taken 47914
      200:   27:	    shuffle(player, state);
call    0 returned 200
        -:   28:	}
        -:   29:
        -:   30:        // draw a card, and get its value
    48114:   31:	drawCard(player, state);
call    0 returned 48114
    48114:   32:        cardDrawn = getDrawnCard(player, state);
call    0 returned 48114
        -:   33:
        -:   34:        // if the card is a treasure card, add it to drawnTreasure count
    48114:   35:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 47714 (fallthrough)
branch  1 taken 400
branch  2 taken 47714 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 47714
        -:   36:        {
      400:   37:            drawnTreasure++;
        -:   38:        }
        -:   39:        // if the card isn't a treasure card, discard it
        -:   40:	else {
    47714:   41:            discardLastDrawnCard(player, state);
call    0 returned 47714
        -:   42:	}
        -:   43:    }
        -:   44:
        -:   45:
      200:   46:    return 0;
        -:   47:}
        -:   48:
        -:   49:
function getDrawnCard called 48114 returned 100% blocks executed 100%
    48114:   50:int getDrawnCard(int player, struct gameState *state) {
    48114:   51:    int topCardIndex = state->handCount[player] - 1;
    48114:   52:    return state->hand[player][topCardIndex];
        -:   53:}
        -:   54:
function discardLastDrawnCard called 47714 returned 100% blocks executed 100%
    47714:   55:void discardLastDrawnCard(int player, struct gameState *state) {
    47714:   56:    int lastCardIndex = state->handCount[player] - 1;
    47714:   57:    discardCard(lastCardIndex, player, state, 1); 
call    0 returned 47714
    47714:   58:}
        -:   59:
