        -:    0:Source:randomtestcard3.c
        -:    0:Graph:randomtestcard3.gcno
        -:    0:Data:randomtestcard3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "cards/mine.h"
        -:    4:#include "rngs.h"
        -:    5:#include <assert.h>
        -:    6:#include <stdio.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <string.h>
        -:    9:#include <math.h>
        -:   10:
        -:   11:#define NUM_RANDOM_TESTS 500
        -:   12:
        -:   13:int randomizeGameState(struct gameState *randomState);
        -:   14:void testMineCard(struct gameState *testState);
        -:   15:void checkMineCard(struct gameState *testState,
        -:   16:                         struct gameState *controlState, int player);
        -:   17:
        1:   18:int main() {
        1:   19:    struct gameState *testState = malloc(sizeof(struct gameState));
        -:   20:
        1:   21:    printf("Testing playMine\n");
        -:   22:
      501:   23:    for(int i = 0; i < NUM_RANDOM_TESTS; i++) {
      500:   24:        printf("test %d\n", i);
      500:   25:        testMineCard(testState);
        -:   26:    }
        -:   27:
        1:   28:    printf("ALL TESTS OK\n");
        -:   29:
        1:   30:    return 0;
        -:   31:}
        -:   32:
        -:   33:
      500:   34:int randomizeGameState(struct gameState *randomState) {
      500:   35:    int playerNumber = floor(Random() * 2);
        -:   36:
 13150500:   37:    for (int i = 0; i < sizeof(struct gameState); i++) {
 13150000:   38:        ((char*)randomState)[i] = floor(Random() * 256);
        -:   39:    }
        -:   40:    
      500:   41:    randomState->deckCount[playerNumber] = floor(Random() * MAX_DECK);
      500:   42:    randomState->discardCount[playerNumber] = floor(Random() * MAX_DECK);
      500:   43:    randomState->handCount[playerNumber] = floor(Random() * MAX_DECK);
      500:   44:    randomState->hand[playerNumber][0] = mine;
      500:   45:    randomState->hand[playerNumber][1] = floor(Random() * 3) + copper; 
        -:   46:
      500:   47:    return playerNumber;
        -:   48:}
        -:   49:
        -:   50:
      500:   51:void testMineCard(struct gameState *testState) {
      500:   52:    struct gameState *controlState = malloc(sizeof(struct gameState));
        -:   53:
      500:   54:    int playerNum = randomizeGameState(testState);
        -:   55:
        -:   56:
      500:   57:    memcpy(controlState, testState, sizeof(struct gameState));
        -:   58:
      500:   59:    playMine(playerNum, testState, 0, 1);
        -:   60:
      500:   61:    checkMineCard(testState, controlState, playerNum);
      500:   62:}
        -:   63:
      500:   64:void checkMineCard(struct gameState *testState,
        -:   65:                         struct gameState *controlState, int player) {
        -:   66:
      500:   67:        memcpy(controlState->hand[player],
      500:   68:                testState->hand[player],
        -:   69:                sizeof(int) * MAX_DECK);
      500:   70:        memcpy(controlState->deck[player], testState->deck[player],
        -:   71:                sizeof(int) * MAX_DECK);
      500:   72:        memcpy(controlState->discard[player], testState->discard[player],
        -:   73:                sizeof(int) * MAX_DECK);
        -:   74:
      500:   75:        controlState->deckCount[player] = testState->deckCount[player];
      500:   76:        controlState->discardCount[player] = testState->discardCount[player];
      500:   77:        controlState->handCount[player] = testState->handCount[player];
        -:   78:       
      500:   79:        memcpy(controlState->supplyCount, testState->supplyCount, 
        -:   80:                sizeof(int) * treasure_map);
        -:   81:
        -:   82:
      500:   83:        assert(memcmp(controlState->supplyCount, testState->supplyCount, sizeof(int) * treasure_map)
        -:   84:                == 0);
        -:   85:
      500:   86:    assert(memcmp(controlState, testState, sizeof(struct gameState)) == 0);
      500:   87:}
        -:   88:
